// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/pitchbackend/v1/game.proto

package pitchbackendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "pitch_backend/presentation/pb/api/pitchbackend/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GameServiceName is the fully-qualified name of the GameService service.
	GameServiceName = "api.pitchbackend.v1.GameService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GameServiceCreateGameProcedure is the fully-qualified name of the GameService's CreateGame RPC.
	GameServiceCreateGameProcedure = "/api.pitchbackend.v1.GameService/CreateGame"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gameServiceServiceDescriptor          = v1.File_api_pitchbackend_v1_game_proto.Services().ByName("GameService")
	gameServiceCreateGameMethodDescriptor = gameServiceServiceDescriptor.Methods().ByName("CreateGame")
)

// GameServiceClient is a client for the api.pitchbackend.v1.GameService service.
type GameServiceClient interface {
	CreateGame(context.Context, *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error)
}

// NewGameServiceClient constructs a client for the api.pitchbackend.v1.GameService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGameServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GameServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gameServiceClient{
		createGame: connect.NewClient[v1.CreateGameRequest, v1.CreateGameResponse](
			httpClient,
			baseURL+GameServiceCreateGameProcedure,
			connect.WithSchema(gameServiceCreateGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gameServiceClient implements GameServiceClient.
type gameServiceClient struct {
	createGame *connect.Client[v1.CreateGameRequest, v1.CreateGameResponse]
}

// CreateGame calls api.pitchbackend.v1.GameService.CreateGame.
func (c *gameServiceClient) CreateGame(ctx context.Context, req *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error) {
	return c.createGame.CallUnary(ctx, req)
}

// GameServiceHandler is an implementation of the api.pitchbackend.v1.GameService service.
type GameServiceHandler interface {
	CreateGame(context.Context, *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error)
}

// NewGameServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGameServiceHandler(svc GameServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gameServiceCreateGameHandler := connect.NewUnaryHandler(
		GameServiceCreateGameProcedure,
		svc.CreateGame,
		connect.WithSchema(gameServiceCreateGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.pitchbackend.v1.GameService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GameServiceCreateGameProcedure:
			gameServiceCreateGameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGameServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGameServiceHandler struct{}

func (UnimplementedGameServiceHandler) CreateGame(context.Context, *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.pitchbackend.v1.GameService.CreateGame is not implemented"))
}
